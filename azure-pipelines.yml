# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

pr:
- master

jobs:

# UNIT TESTS
- job: 'Test'
  pool:
    vmImage: "vs2017-win2016"
  strategy:
    matrix:
      # Python36:
      #   python.version: '3.6'
      Python37:
        python.version: '3.7'
    maxParallel: 2

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'
      addToPath: true

  - script: |
      python -m pip install -U pip
      pip install -U -r ./requirements.txt
      pip install -U -r tests/requirements_test.txt
    displayName: 'Install dependencies'

  - script: |
      python -m pytest --doctest-modules --junitxml=junit/test-results.xml --cov=com --cov-report=xml --cov-report=html --cov-append tests
    env:
      # platform
      ISOGEO_PLATFORM: $(ISOGEO_PLATFORM)
      OAUTHLIB_INSECURE_TRANSPORT: $(OAUTHLIB_INSECURE_TRANSPORT)
      # URLs
      ISOGEO_API_URL: $(ISOGEO_API_URL)
      ISOGEO_ID_URL: $(ISOGEO_ID_URL)
      # oAuth2 Client Credentials Grant
      ISOGEO_API_DEV_ID: $(ISOGEO_API_DEV_ID)
      ISOGEO_API_DEV_SECRET: $(ISOGEO_API_DEV_SECRET)
      # oAuth2 Legacy Application Client
      ISOGEO_API_USER_CLIENT_ID: $(ISOGEO_API_USER_CLIENT_ID)
      ISOGEO_API_USER_CLIENT_SECRET: $(ISOGEO_API_USER_CLIENT_SECRET)
      ISOGEO_USER_NAME: $(ISOGEO_USER_NAME)
      ISOGEO_USER_PASSWORD: $(ISOGEO_USER_PASSWORD)
      # static fixtures
      ISOGEO_FIXTURES_METADATA_COMPLETE: $(ISOGEO_FIXTURES_METADATA_COMPLETE)
      ISOGEO_WORKGROUP_TEST_UUID: $(ISOGEO_WORKGROUP_TEST_UUID)
    displayName: 'Tests and coverage - Pytest'

  # # Codecov. Inspired from: https://github.com/codecov/example-azure-pipelines
  # - task: Bash@3
  #   displayName: "Publish coverage results to Codecov"
  #   condition: succeededOrFailed()
  #   continueOnError: true
  #   inputs:
  #     targetType: 'inline'
  #     script: <(curl https://codecov.io/bash) -t $(CODECOV_TOKEN) -f coverage.xml

  - task: PublishTestResults@2
    displayName: "Publish unit test results"
    condition: succeededOrFailed()
    inputs:
      testResultsFiles: '**/test-*.xml'
      testRunTitle: 'Publish test results for Python $(python.version)'

  - task: PublishCodeCoverageResults@1
    displayName: "Publish coverage results to Azure Pipelines"
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
      reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'


# LINT AND FORMATTING CODE
- job: 'Lint'
  dependsOn: 'Test'
  pool:
    vmImage: "vs2017-win2016"

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.6'
      architecture: 'x64'
      addToPath: true

  - script: |
      python -m pip install -U pip
      python -m pip install -U black
    displayName: 'Install black dependencies'

  - script: python -m black --target-version=py36 .\isogeo_pysdk
    displayName: 'Apply black code formatting'

# BUILD
- job: 'Build'
  dependsOn: 'Lint'
  pool:
    vmImage: "vs2017-win2016"

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.x'
      architecture: 'x64'
      addToPath: true

  - script: |
      python -m pip install -U pip setuptools wheel
      python -m pip install -U -r requirements.txt
      python -m pip install -U twine
    displayName: 'Install dependencies'

  - script: python setup.py egg_info
    displayName: 'Build package metadata'

  - script: python setup.py sdist
    displayName: 'Build sdist'

  - script: python setup.py bdist_wheel
    displayName: 'Build wheel'


# PUBLISH
- job: 'Publish'
  dependsOn: 'Build'
  pool:
    vmImage: "vs2017-win2016"
  condition:
    contains(variables['Build.SourceBranch'], 'tags')

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.x'
      architecture: 'x64'
      addToPath: true

  - script: 'python -m pip install -U twine'

  # - script: twine upload dist/* -u $(TWINE_USERNAME) -p $(TWINE_PASSWORD)
  #   displayName: "Upload to PyPi"
