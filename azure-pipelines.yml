# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

jobs:

- job: 'Test'
  pool:
    vmImage: 'Ubuntu 16.04'
  strategy:
    matrix:
      # Python27:
      #   python.version: '2.7'
      # Python35:
      #   python.version: '3.5'
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'
    maxParallel: 2

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'
      addToPath: true

  - script: |
      python -m pip install -U pip
      pip install -U -r ./requirements.txt
      pip install -U -r tests/requirements_test.txt
    displayName: 'Install dependencies'

  - script: |
      pytest tests --doctest-modules --junitxml=junit/test-results.xml --cov=com --cov-report=xml --cov-report=html
      coverage run -m unittest discover -s tests/
      coverage xml
    env:
      ISOGEO_API_DEV_ID: $(ISOGEO_API_DEV_ID)
      ISOGEO_API_DEV_SECRET: $(ISOGEO_API_DEV_SECRET)
      ISOGEO_MAILCHIMP_API_PROD_KEY: $(ISOGEO_MAILCHIMP_API_PROD_KEY)
      ISOGEO_MAILCHIMP_API_QA_KEY: $(ISOGEO_MAILCHIMP_API_QA_KEY)
    displayName: 'Tests and coverage'

  - task: PublishTestResults@2
    displayName: "Publish unit test results"
    condition: succeededOrFailed()
    inputs:
      testResultsFiles: '**/test-*.xml'
      testRunTitle: 'Publish test results for Python $(python.version)'

  - task: PublishCodeCoverageResults@1
    displayName: "Publish coverage results"
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
      reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'

- job: 'Build'
  dependsOn: 'Test'
  pool:
    vmImage: 'Ubuntu 16.04'

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.x'
      architecture: 'x64'
      addToPath: true

  - script: |
      python -m pip install -U pip
      pip install -U -r requirements.txt
      pip install -U twine
    displayName: 'Install dependencies'

  - script: python setup.py egg_info
    displayName: 'Build package metadata'

  - script: python setup.py sdist
    displayName: 'Build sdist'

  - script: python setup.py bdist_wheel
    displayName: 'Build wheel'

  - script: twine upload dist/* -u $(TWINE_USERNAME) -p $(TWINE_PASSWORD)
    displayName: "Upload to PyPi"
